{"version":3,"sources":["src/queries/gqlQueries.js","src/components/SignInScreen.js","src/components/SignUpScreen.js","src/components/ItemModalComponent.js","src/components/Home.js","src/Main.js","src/styles.js","App.js","assets/fonts/KumbhSans-VariableFont_wght.ttf"],"names":["CURRENT_USER","gql","SEARCH_QUERY","REGISTER","LOGIN","ADD_WORD","SignInSchema","Yup","shape","username","min","max","required","password","SignIn","user","navigation","setUser","route","useMutation","login","data","loading","called","error","useState","loadingView","setLoadingView","React","createRef","useEffect","console","log","Token","token","a","async","AsyncStorage","setItem","prevUser","useTheme","headingSmall","container","warn","button","supplText","txtInput","scrollContainer","ActivityIndicator","animating","color","ScrollView","contentContainerStyle","initialValues","validationSchema","onSubmit","variables","handleChange","errors","handleBlur","handleSubmit","values","Text","style","TextInput","onChangeText","onBlur","value","mode","label","secureTextEntry","Button","onPress","navigate","Paragraph","marginTop","SignupSchema","passwordConfirmation","oneOf","register","View","RenderModal","props","Platform","OS","Modal","ItemModal","item","wordContainer","headline","search","colors","pos","fab","visible","setVisible","hideModal","Card","Pressable","Headline","word","flexWrap","meanings","map","current","i","flexDirection","padding","justifyContent","key","partOfSpeech","fontSize","fontFamily","wordBreak","definitions","definition","Portal","animationType","onDismiss","backgroundColor","flex","width","icon","position","top","right","origin","phonetic","fontStyle","Entypo","name","size","definitionItem","j","paddingLeft","paddingBottom","example","synonyms","join","antonyms","wordSchema","Home","card","diag","searchQuery","setSearchQuery","flatData","setFlatData","useLazyQuery","getData","searchError","searchData","refetchQueries","query","wordQuery","addWordLoading","useQuery","refetch","pages","setPages","formRef","useRef","currentUser","words","dataField","matchingWords","length","TargetArr","arrayAfterProcess","fun","input","push","splice","concat","open","state","setState","Colors","message","alignItems","alignSelf","primary","left","Searchbar","inputStyle","placeholder","onIconPress","AntDesign","clear","undefined","Title","title","FlatList","renderItem","keyExtractor","_id","id","Dialog","dismissable","Content","innerRef","Actions","FAB","Group","actions","small","onStateChange","Stack","createNativeStackNavigator","MainComponent","useLayoutEffect","getItem","res","NavigationContainer","Navigator","Screen","options","headerShown","component","SignUp","theme","DefaultTheme","space","margin","borderWidth","fontWeight","wid","align","justifySelf","borderRadius","hp","wp","flexGrow","this","animation","dark","fonts","roundness","authLink","setContext","_","headers","token1","authorization","httpLink","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","connectToDevTools","App","useFonts","KumbhSans","require","SafeAreaView","StatusBar","ApolloProvider","Main","module","exports"],"mappings":"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","file":"static/js/app.4321cc14.chunk.js","sourcesContent":["import { gql, useQuery } from '@apollo/client';\n\nconst CURRENT_USER = gql`\n  query {\n    currentUser {\n      id\n      words\n    }\n  }\n`;\nconst SEARCH_QUERY = gql`\n  query ($searchQuery: String!) {\n    matchingWords(searchQuery: $searchQuery) {\n      id\n      word\n      phonetic\n      origin\n      phonetics {\n        audio\n        text\n      }\n      meanings {\n        partOfSpeech\n        definitions {\n          antonyms\n          definition\n          example\n          synonyms\n        }\n      }\n    }\n  }\n`;\n\nconst ALL_WORDS = gql`\n  query {\n    allWords {\n      id\n      word\n      origin\n      phonetic\n      phonetics {\n        audio\n        text\n      }\n      meanings {\n        partOfSpeech\n        definitions {\n          antonyms\n          definition\n          example\n          synonyms\n        }\n      }\n    }\n  }\n`;\n\nconst REGISTER = gql`\n  mutation ($username: String!, $password: String!) {\n    register(username: $username, password: $password)\n  }\n`;\n\nconst LOGIN = gql`\n  mutation ($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nconst ADD_WORD = gql`\n  mutation ($word: String!) {\n    addWord(word: $word)\n  }\n`;\n\nexport { ADD_WORD, ALL_WORDS, LOGIN, REGISTER, SEARCH_QUERY, CURRENT_USER };\n","//import liraries\nimport React, { Component, useEffect, useState } from 'react';\nimport { ScrollView, View, StyleSheet } from 'react-native';\nimport {\n  Card,\n  Text,\n  Headline,\n  Button,\n  TextInput,\n  FAB,\n  Paragraph,\n  useTheme,\n  ActivityIndicator,\n} from 'react-native-paper';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { Formik } from 'formik';\nimport { LOGIN } from '../queries/gqlQueries';\nimport * as Yup from 'yup';\nimport { useMutation } from '@apollo/client';\n\nconst SignInSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(4, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(12, 'Too Long!')\n    .required('Required'),\n});\n\n// create a component\nconst SignIn = ({ user, navigation, route, setUser }) => {\n  const [login, { data, called, loading, error }] = useMutation(LOGIN);\n  const [loadingView, setLoadingView] = useState(null);\n  const logRef = React.createRef(null);\n\n  useEffect(() => {\n    console.log(data, loading, error);\n    if (data) {\n      const Token = data.login.token;\n      console.log(Token);\n      const settingToken = async () => {\n        await AsyncStorage.setItem('@gql_vocab_token', Token);\n\n        setUser((prevUser) => ({\n          ...prevUser,\n          token: Token,\n        }));\n        setLoadingView(false);\n      };\n      settingToken();\n    }\n    setLoadingView(false);\n    /*  setTimeout(() => {\n      logRef.current.Text = '';\n    }, 7000);\n    */ // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, loading, error]);\n\n  /*   const clearAsyncStorage = async () => {\n    return AsyncStorage.clear();\n  };\n  clearAsyncStorage();\n */\n  const {\n    container,\n    headingSmall,\n    warn,\n    button,\n    supplText,\n    txtInput,\n    scrollContainer,\n  } = useTheme();\n\n  if (loadingView) {\n    return <ActivityIndicator animating={true} color='red' />;\n  }\n\n  return (\n    <ScrollView contentContainerStyle={{ ...scrollContainer() }}>\n      <Formik\n        initialValues={{ username: '', password: '' }}\n        validationSchema={SignInSchema}\n        onSubmit={({ username, password }) => {\n          console.log(username, password);\n          setLoadingView(true);\n\n          login({\n            variables: {\n              username,\n              password,\n            },\n          });\n        }}>\n        {({ handleChange, errors, handleBlur, handleSubmit, values }) => (\n          <ScrollView contentContainerStyle={{ ...scrollContainer() }}>\n            <Text style={headingSmall()}>Sign In</Text>\n            <TextInput\n              style={txtInput()}\n              onChangeText={handleChange('username')}\n              onBlur={handleBlur('username')}\n              value={values.username}\n              mode='outlined'\n              label='Username'\n            />\n            <Text style={warn()}>{errors.username}</Text>\n            <TextInput\n              style={txtInput()}\n              onChangeText={handleChange('password')}\n              onBlur={handleBlur('password')}\n              value={values.password}\n              mode='outlined'\n              label='Password'\n              secureTextEntry={true}\n            />\n\n            <Text style={warn()}>{errors.password}</Text>\n\n            <Button mode='contained' onPress={handleSubmit} style={button()}>\n              Submit\n            </Button>\n            <Text style={supplText()}>OR</Text>\n            <Button\n              mode='contained'\n              onPress={() => navigation.navigate('SignUp')}\n              style={button()}>\n              SignUp\n            </Button>\n            <Paragraph style={{ ...warn, marginTop: 20 }}>\n              {loading ? 'Loading' : ''}\n              {error ? 'Error' : ''}\n            </Paragraph>\n          </ScrollView>\n        )}\n      </Formik>\n    </ScrollView>\n  );\n};\n\n// define your styles\n\n//make this component available to the app\nexport default SignIn;\n/* style={{\n        ...container,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n       */\n/* <Paragraph style={warn}>\n              {called\n                ? error\n                  ? `Error: ${error}`\n                  : called && data && data.login.token\n                  ? `Login successful`\n                  : 'Login failed'\n                : ''}\n            </Paragraph>\n          */\n","//import liraries\nimport React, { Component, useState } from 'react';\nimport { View, StyleSheet, ScrollView } from 'react-native';\nimport {\n  Card,\n  Text,\n  Headline,\n  Button,\n  TextInput,\n  Paragraph,\n  useTheme,\n} from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useMutation } from '@apollo/client';\nimport { REGISTER } from '../queries/gqlQueries';\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(4, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(12, 'Too Long!')\n    .required('Required'),\n  passwordConfirmation: Yup.string().oneOf(\n    [Yup.ref('password'), null],\n    'Passwords must match'\n  ),\n});\n\n// create a component\nconst SignIn = ({ user, navigation, route, setUser }) => {\n  const {\n    container,\n    scrollContainer,\n    headingSmall,\n    supplText,\n    warn,\n    button,\n    txtInput,\n  } = useTheme();\n\n  const [register, registerResult] = useMutation(REGISTER);\n  return (\n    <View style={{ ...container() }}>\n      <Formik\n        initialValues={{ username: '', password: '', passwordConfirmation: '' }}\n        validationSchema={SignupSchema}\n        onSubmit={({ username, password }) => {\n          register({\n            variables: {\n              username,\n              password,\n            },\n          });\n        }}>\n        {({ handleChange, errors, handleBlur, handleSubmit, values }) => (\n          <View style={{ ...container() }}>\n            <Text style={headingSmall()}>Sign Up</Text>\n            <TextInput\n              style={txtInput()}\n              onChangeText={handleChange('username')}\n              onBlur={handleBlur('username')}\n              value={values.username}\n              mode='outlined'\n              label='Username'\n            />\n            <Text style={warn()}>{errors.username}</Text>\n            <TextInput\n              style={txtInput()}\n              onChangeText={handleChange('password')}\n              onBlur={handleBlur('password')}\n              value={values.password}\n              mode='outlined'\n              label='Password'\n              secureTextEntry={true}\n            />\n\n            <Text style={warn()}>{errors.password}</Text>\n            <TextInput\n              style={txtInput()}\n              onChangeText={handleChange('passwordConfirmation')}\n              onBlur={handleBlur('passwordConfirmation')}\n              value={values.passwordConfirmation}\n              mode='outlined'\n              label='Confirm Password'\n              secureTextEntry={true}\n            />\n\n            <Text style={warn()}>{errors.passwordConfirmation}</Text>\n\n            <Button mode='contained' onPress={handleSubmit} style={button()}>\n              Submit\n            </Button>\n            <Text style={supplText()}>OR</Text>\n            <Button\n              mode='contained'\n              onPress={() => navigation.navigate('SignIn')}\n              style={button()}>\n              SignIn\n            </Button>\n          </View>\n        )}\n      </Formik>\n    </View>\n  );\n};\n\n// define your styles\n\n//make this component available to the app\nexport default SignIn;\n\n/*   <Paragraph style={warn}>\n              {registerResult.called\n                ? error\n                  ? `Error: ${error}`\n                  : registerResult.called &&\n                    registerResult.data &&\n                    registerResult.data.register\n                  ? ` successfully registered`\n                  : 'Registration failed'\n                : ''}\n            </Paragraph>\n          */\n","//import liraries\nimport React, { Component } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  Platform,\n  StyleSheet,\n  Pressable,\n  ScrollView,\n} from 'react-native';\nimport {\n  Headline,\n  Title,\n  Portal,\n  Button,\n  Modal as WebModal,\n  Card,\n  useTheme,\n} from 'react-native-paper';\nimport { Entypo } from '@expo/vector-icons';\n// create a component\nconst ItemModal = ({ item }) => {\n  const {\n    container,\n    headingSmall,\n    txtInput,\n    warn,\n    wordContainer,\n    button,\n    search,\n    colors,\n    headline,\n    fab,\n    pos,\n    scrollContainer,\n  } = useTheme();\n  const [visible, setVisible] = React.useState(false);\n  const showModal = () => setVisible(true);\n  const hideModal = () => setVisible(false);\n  return (\n    <Card style={{ ...wordContainer() }}>\n      <Pressable onPress={showModal}>\n        <Headline style={headline()}>{item.word}</Headline>\n        <View style={{ flexWrap: 'wrap' }}>\n          {item.meanings.map((current, i) => (\n            <View\n              style={{\n                flexDirection: 'column',\n                padding: 10,\n                justifyContent: 'flex-start',\n              }}\n              key={current.partOfSpeech}>\n              <Text\n                style={{\n                  fontSize: 16,\n                  fontFamily: 'KumbhSans',\n                  flexWrap: 'wrap',\n                  padding: 5,\n                }}>\n                ({current.partOfSpeech})\n              </Text>\n\n              <Text\n                style={{\n                  fontSize: 16,\n                  fontFamily: 'KumbhSans',\n                  flexWrap: 'wrap',\n                  padding: 5,\n                  wordBreak: 'breakWord',\n                }}>\n                {current.definitions[0].definition}\n              </Text>\n            </View>\n          ))}\n        </View>\n        <Portal>\n          <RenderModal\n            visible={visible}\n            animationType='slide'\n            onDismiss={hideModal}\n            contentContainerStyle={{\n              backgroundColor: 'white',\n              padding: 20,\n              flex: 1,\n              width: '100%',\n              justifyContent: 'start',\n            }}>\n            <ScrollView\n              contentContainerStyle={{ ...scrollContainer, padding: 20 }}>\n              <Button\n                icon='close'\n                onPress={hideModal}\n                style={{\n                  position: 'absolute',\n                  top: 10,\n                  right: 10,\n                }}\n              />\n\n              <Headline style={headline()}>{item.word}</Headline>\n              <Text style={pos()}>Origin : {item.origin}</Text>\n              <Text style={pos()}>Phonetic : {item.phonetic}</Text>\n\n              {item.meanings.map((current, i) => (\n                <View\n                  key={i}\n                  key={current.partOfSpeech}\n                  style={{ padding: 10 }}>\n                  <Text style={{ ...pos(), fontStyle: 'italic' }}>\n                    <Entypo name='dot-single' size={24} color='black' />\n                    Part of speech : {current.partOfSpeech}\n                  </Text>\n                  {current.definitions.map((definitionItem, j) => (\n                    <View\n                      key={j}\n                      style={{ paddingLeft: 30, paddingBottom: 20 }}>\n                      <Text style={pos()}>\n                        Definition : {definitionItem.definition}\n                      </Text>\n                      <Text style={pos()}>\n                        Example : {definitionItem.example}\n                      </Text>\n                      <Text style={pos()}>\n                        Synonyms : {definitionItem.synonyms.join(', ')}\n                      </Text>\n                      <Text style={pos()}>\n                        Antonyms : {definitionItem.antonyms.join(', ')}\n                      </Text>\n                    </View>\n                  ))}\n                </View>\n              ))}\n            </ScrollView>\n          </RenderModal>\n        </Portal>\n      </Pressable>\n    </Card>\n  );\n};\n\n// define your styles\nfunction RenderModal(props) {\n  if (Platform.OS === 'web') {\n    return <WebModal {...props} />;\n  }\n\n  return <Modal {...props} />;\n}\n\n//make this component available to the app\nexport default ItemModal;\n","import React, { useEffect, useState } from 'react';\nimport { useMutation, useLazyQuery, useQuery } from '@apollo/client';\nimport {\n  Modal,\n  Platform,\n  Text,\n  View,\n  //RefreshControl,\n  StyleSheet,\n  ScrollView,\n  FlatList,\n} from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { ADD_WORD, CURRENT_USER, SEARCH_QUERY } from '../queries/gqlQueries';\nimport { RefreshControl } from 'react-native-web-refresh-control';\nimport { patchFlatListProps } from 'react-native-web-refresh-control';\nimport { AntDesign } from '@expo/vector-icons';\nimport {\n  Searchbar,\n  TextInput,\n  ActivityIndicator,\n  Colors,\n  Modal as WebModal,\n  Paragraph,\n  FAB,\n  useTheme,\n  Card,\n  Dialog,\n  Portal,\n  Button,\n} from 'react-native-paper';\nimport { Formik, useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport ItemModal from './ItemModalComponent';\nimport { Entypo } from '@expo/vector-icons';\nconst wordSchema = Yup.object().shape({\n  word: Yup.string().required('Required'),\n});\n\nconst Home = ({ user, navigation, route, setUser }) => {\n  const {\n    container,\n    headingSmall,\n    pos,\n    txtInput,\n    warn,\n    button,\n    scrollContainer,\n    search,\n    colors,\n    card,\n    fab,\n    diag,\n  } = useTheme();\n  const [visible, setVisible] = React.useState(false);\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [flatData, setFlatData] = React.useState([]);\n  const [refreshing, setRefreshing] = React.useState(false);\n  const [\n    getData,\n    { loading: searchLoading, error: searchError, data: searchData },\n  ] = useLazyQuery(SEARCH_QUERY);\n\n  const [\n    wordQuery,\n    { called, loading: addWordLoading, error: addWordError, data: addWordData },\n  ] = useMutation(ADD_WORD, {\n    refetchQueries: [{ query: CURRENT_USER }],\n  });\n  const { loading, error, data, refetch } = useQuery(CURRENT_USER);\n  const [pages, setPages] = useState({\n    current: 0,\n    data: [],\n  });\n  const onChangeSearch = (query) => setSearchQuery(query);\n  const showModal = () => setVisible(true);\n  const hideModal = () => setVisible(false);\n  console.log(flatData);\n  const formRef = React.useRef(null);\n  React.useEffect(() => {\n    setFlatData(data?.currentUser?.words);\n  }, [data?.currentUser?.words]);\n  console.log(searchData);\n  React.useEffect(() => {\n    console.log(searchData);\n    const dataField =\n      searchQuery || !searchError\n        ? searchData?.matchingWords\n        : data?.currentUser?.words;\n    setFlatData(dataField);\n  }, [searchQuery, searchData, searchError]);\n  //  getData({ variables: { searchQuery } });\n  React.useEffect(() => {\n    if (flatData) {\n      console.log(flatData.length);\n      let arrayAfterProcess = [];\n      let TargetArr;\n      const fun = (input) => {\n        TargetArr = [...input];\n        if (TargetArr.length > 8) {\n          arrayAfterProcess.push(TargetArr.splice(0, 4));\n          console.log(arrayAfterProcess);\n          console.log(TargetArr);\n          fun(TargetArr);\n        }\n        //return arrayAfterProcess.push(TargetArr);\n      };\n      fun(flatData);\n      setPages({ ...pages, data: arrayAfterProcess.concat([TargetArr]) });\n      console.log(pages);\n    }\n    //fun(flatData);\n  }, [flatData]);\n\n  const [state, setState] = React.useState({ open: false });\n\n  const onStateChange = ({ open }) => setState({ open });\n\n  const { open } = state;\n  if (loading)\n    return <ActivityIndicator animating={true} color={Colors.primary} />;\n  if (error) return <Text>Error! {error.message}</Text>;\n  return (\n    <View style={{ ...container, alignItems: 'center' }}>\n      <View\n        style={{\n          ...container(),\n          flexDirection: 'row',\n          alignSelf: 'center',\n          marginTop: 0,\n          padding: 20,\n          flex: 1,\n          justifyContent: 'center',\n          width: '100%',\n          backgroundColor: colors.primary,\n        }}>\n        <Text\n          style={{\n            ...headingSmall(),\n            position: 'absolute',\n            left: 10,\n            color: 'white',\n          }}>\n          Vocab\n        </Text>\n        <Searchbar\n          onChangeText={onChangeSearch}\n          value={searchQuery}\n          style={{\n            ...search(),\n            backgroundColor: '#db6ac3',\n          }}\n          inputStyle={{\n            color: 'white',\n          }}\n          placeholder='Search'\n          onIconPress={() => {\n            getData({ variables: { searchQuery } });\n          }}\n        />\n        <Button\n          icon={() => <AntDesign name='logout' size={30} color='white' />}\n          style={{ position: 'absolute', right: 10 }}\n          onPress={() => {\n            AsyncStorage.clear();\n            setUser({\n              token: null,\n              user: {},\n            });\n          }}\n        />\n      </View>\n      <Card style={card(undefined, 'flex-start')}>\n        <Card.Title title='Words List' />\n      </Card>\n      <FlatList\n        contentContainerStyle={{ scrollContainer }}\n        data={pages.data[pages.current]}\n        renderItem={(item) => <ItemModal {...item} />}\n        keyExtractor={(item) => item._id ?? item.id}\n      />\n\n      <Portal>\n        <Dialog\n          visible={visible}\n          dismissable\n          style={diag()}\n          onDismiss={hideModal}>\n          <View>\n            <Dialog.Title style={headingSmall()}>\n              Add to Dictionary\n            </Dialog.Title>\n            <Dialog.Content>\n              <Formik\n                initialValues={{ word: '' }}\n                innerRef={formRef}\n                validationSchema={wordSchema}\n                onSubmit={({ word }) => {\n                  console.log(word);\n                  wordQuery({\n                    variables: {\n                      word,\n                    },\n                  });\n                  addWordLoading ? null : hideModal();\n                }}>\n                {({\n                  handleChange,\n                  errors,\n                  handleBlur,\n                  handleSubmit,\n                  values,\n                }) => (\n                  <View style={container()}>\n                    <TextInput\n                      style={txtInput()}\n                      onChangeText={handleChange('word')}\n                      onBlur={handleBlur('word')}\n                      value={values.word}\n                      label='New Word'\n                      mode='flat'\n                    />\n                  </View>\n                )}\n              </Formik>\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={hideModal}>CANCEL</Button>\n              {addWordLoading ? (\n                <ActivityIndicator animating={true} color='red' />\n              ) : (\n                <Button onPress={() => formRef.current.handleSubmit()}>\n                  ADD\n                </Button>\n              )}\n            </Dialog.Actions>\n          </View>\n        </Dialog>\n      </Portal>\n      <Portal>\n        <FAB.Group\n          open={open}\n          icon={() => <Entypo name='menu' size={24} color='black' />}\n          actions={[\n            {\n              icon: 'plus',\n              label: 'Add word',\n              onPress: () => showModal(),\n              small: false,\n            },\n            {\n              icon: () => <Entypo name='forward' size={24} color='black' />,\n              label: 'Go Forward',\n              onPress: () => {\n                let length = pages.data.length;\n\n                if (pages.current < pages.data.length - 1) {\n                  setPages({\n                    ...pages,\n                    current: pages.current + 1,\n                  });\n                } else {\n                  setPages({\n                    ...pages,\n                    current: 0,\n                  });\n                }\n              },\n              small: false,\n            },\n            {\n              icon: () => <Entypo name='back' size={24} color='black' />,\n              label: 'Go Back',\n              onPress: () => {\n                let length = pages.data.length;\n\n                if (pages.current > 1) {\n                  setPages({\n                    ...pages,\n                    current: pages.current - 1,\n                  });\n                } else {\n                  setPages({\n                    ...pages,\n                    current: pages.data.length - 1,\n                  });\n                }\n              },\n              small: false,\n            },\n          ]}\n          onStateChange={onStateChange}\n          onPress={() => {\n            if (open) {\n              // do something if the speed dial is open\n            }\n          }}\n        />\n      </Portal>\n    </View>\n  );\n};\n\nexport default Home;\n\n/*\n\n      <FAB small icon='plus' style={fab()}  />\n      <FAB small icon='plus' style={fab()} onPress={showModal} />\n\n      <FAB small icon='plus' style={fab()} onPress={showModal} />\n\nrefreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={() => {\n              setRefreshing(true);\n              setTimeout(() => {\n                setRefreshing(false);\n                refetch();\n              }, 5000);\n            }}\n          />\n        }\n*/\n\n/*< FlatList\n        data={DATA}\n        renderItem={ItemModal}\n        keyExtractor={(item) => item.id}\n      /> */\n\n/* <Paragraph style={warn}>\n        {called\n          ? addWordError || error\n            ? JSON.stringify(addWordError.graphQLErrors[0].message) +\n              JSON.stringify(error)\n            : addWordData?.addWord\n          : ''}\n      </Paragraph>;\n               \nfunction RenderModal(props) {\n  if (Platform.OS === 'web') {\n    return <WebModal {...props} />;\n  }\n\n  return <Modal {...props} />;\n}\n */\n/* \n\n/*{' '}\n                  <Button\n                    mode='contained'\n                    onPress={handleSubmit}\n                    style={button}>\n                    Submit\n                  </Button>\n                  */\n\n/* {<AntDesign name='close' size={24} color='black' />}\n */\n\n/*  <Portal>\n           <Modal\n             visible={visible}\n             onDismiss={hideModal}\n             contentContainerStyle={{\n               backgroundColor: 'white',\n               padding: 10,\n               flex: 1,\n               width: '100%',\n               justifyContent: 'start',\n             }}>\n             <Button\n               icon={() => <AntDesign name='close' size={24} color='black' />}\n               onPress={hideModal}\n               style={{\n                 position: 'absolute',\n                 top: 20,\n                 right: 20,\n               }}\n             />\n             <Text>Example Modal. Click outside this area to dismiss.</Text>\n           </Modal>\n         </Portal>\n          \n */\n\n/* \n         \n           <RenderModal\n          visible={visible}\n          animationType='slide'\n          onDismiss={hideModal}\n          contentContainerStyle={{\n            backgroundColor: 'white',\n            padding: 10,\n            flex: 1,\n            width: '100%',\n            justifyContent: 'start',\n          }}>\n          <Formik\n            initialValues={{ word: '' }}\n            validationSchema={wordSchema}\n            onSubmit={(values) => {\n              const { word } = values;\n              console.log(word);\n              wordQuery({\n                variables: {\n                  word,\n                },\n              });\n              values.word = '';\n            }}>\n            {({ handleChange, errors, handleBlur, handleSubmit, values }) => (\n              <View\n                style={{\n                  ...container,\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}>\n                <Button\n                  icon='close'\n                  onPress={hideModal}\n                  style={{\n                    position: 'absolute',\n                    top: 5,\n                    margin: 10,\n                    right: 10,\n                  }}\n                />\n\n                <Text style={headingSmall}>ADD NEW WORD </Text>\n\n                <TextInput\n                  style={txtInput}\n                  onChangeText={handleChange('word')}\n                  onBlur={handleBlur('word')}\n                  value={values.word}\n                  mode='outlined'\n                  label='New Word'\n                />\n\n                <Button mode='contained' onPress={handleSubmit} style={button}>\n                  Submit\n                </Button>\n                <Paragraph style={warn}>\n                  {called\n                    ? addWordError || error\n                      ? JSON.stringify(addWordError.graphQLErrors[0].message) +\n                        JSON.stringify(error)\n                      : addWordData?.addWord\n                    : ''}\n                </Paragraph>\n              </View>\n            )}\n          </Formik>\n        </RenderModal>\n      */\n","//import liraries\nimport React, { Component, useLayoutEffect, useEffect } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport SignIn from './components/SignInScreen';\nimport SignUp from './components/SignUpScreen';\nimport Home from './components/Home';\nimport { Button } from 'react-native-paper';\nconst Stack = createNativeStackNavigator();\n\n// create a component\nconst MainComponent = () => {\n  const [user, setUser] = React.useState({\n    token: null,\n    user: {},\n  });\n  useLayoutEffect(() => {\n    const res = async () => {\n      try {\n        const token = await AsyncStorage.getItem('@gql_vocab_token');\n\n        setUser((prevUser) => ({\n          ...prevUser,\n          token,\n        }));\n      } catch (e) {}\n    };\n\n    res();\n  }, []);\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        {user.token ? (\n          <>\n            <Stack.Screen\n              name=' '\n              options={({ navigation, route }) => ({\n                headerShown: false,\n              })}>\n              {(props) => <Home user={user} setUser={setUser} {...props} />}\n            </Stack.Screen>\n          </>\n        ) : (\n          <>\n            <Stack.Screen name='SignIn'>\n              {(props) => <SignIn user={user} setUser={setUser} {...props} />}\n            </Stack.Screen>\n            <Stack.Screen name='SignUp' component={SignUp} />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default MainComponent;\n//animationTypeForReplace: !user.id ? 'pop' : 'push',\n/* \n      headerRight: (props) => (\n                  <Button\n                    onPress={() => {\n                      AsyncStorage.clear();\n                      setUser({\n                        token: null,\n                        user: {},\n                      });\n                    }}>\n                    Log out\n                  </Button>\n                ),\n           \n*/\n","import React from 'react';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport { Platform } from 'react-native';\nimport { Dimensions } from 'react-native';\nimport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n} from 'react-native-responsive-screen';\n\nclass Theme {\n  DefaultTheme;\n\n  constructor(DefaultTheme) {\n    this.DefaultTheme = DefaultTheme;\n    this.colors = {\n      ...this.DefaultTheme.colors,\n      primary: 'purple',\n    };\n    this.animation = this.DefaultTheme.animation;\n    this.dark = this.DefaultTheme.dark;\n    this.fonts = this.DefaultTheme.fonts;\n    this.roundness = this.DefaultTheme.roundness;\n    this.fontFamily = 'KumbhSans';\n  }\n  wordContainer = (width = 60, space = 5) => {\n    return {\n      width: Platform.OS === 'web' ? `${width}%` : `${width + 20}%`,\n      alignSelf: 'center',\n      padding: space,\n      margin: space,\n      fontFamily: this.fontFamily,\n      borderWidth: 2,\n    };\n  };\n  headline = () => {\n    return {\n      fontFamily: this.fontFamily,\n      fontWeight: 'bold',\n      paddingLeft: 15,\n      justifyContent: 'flex-start',\n    };\n  };\n  card = (wid = 30, align = 'center') => {\n    return {\n      width: Platform.OS === 'web' ? `${wid}%` : `${wid + 20}%`,\n      justifySelf: 'center',\n      alignSelf: 'center',\n      alignItems: align ?? 'center',\n      borderRadius: 10,\n      marginTop: 5,\n    };\n  };\n\n  headingSmall = (fontSize = 19, space = 10) => {\n    return {\n      fontFamily: this.fontFamily,\n      color: this.colors.primary,\n      fontSize: fontSize,\n      alignSelf: 'center',\n      margin: space,\n      fontSize: 22,\n      fontWeight: 'bold',\n    };\n  };\n  pos = () => {\n    return {\n      padding: 5,\n      margin: 5,\n      fontFamily: this.fontFamily,\n    };\n  };\n\n  button = (size = 40) => {\n    console.log(this);\n    return {\n      color: 'white',\n      margin: 10,\n      borderRadius: 10,\n      width: Platform.OS === 'web' ? `${size}%` : `${size + 30}`,\n      alignSelf: 'center',\n      fontFamily: this.fontFamily,\n    };\n  };\n  warn = () => {\n    return {\n      fontSize: 18,\n      color: this.colors.primary,\n      margin: 10,\n      alignSelf: 'center',\n      fontFamily: this.fontFamily,\n    };\n  };\n  txtInput = () => {\n    return {\n      alignSelf: 'center',\n      backgroundColor: 'white',\n      color: this.colors.primary,\n      width: Platform.OS === 'web' ? '40%' : '80%',\n      fontFamily: this.fontFamily,\n    };\n  };\n  search = () => {\n    return {\n      margin: 10,\n      width: Platform.OS === 'web' ? '40%' : '70%',\n      alignSelf: 'center',\n      borderRadius: 10,\n      fontFamily: this.fontFamily,\n      color: 'white',\n    };\n  };\n  fab = () => {\n    return {\n      position: Platform.OS === 'web' ? 'fixed' : 'absolute',\n      top: hp('50%'), // 70% of height device screen\n      right: wp('5%'), // 80% of width device screen\n      fontFamily: this.fontFamily,\n    };\n  };\n\n  container = () => {\n    return {\n      flex: 1,\n    };\n  };\n  supplText = (align = 'center') => {\n    return {\n      margin: 10,\n      fontSize: 18,\n      color: this.colors.primary,\n      alignSelf: 'center',\n    };\n  };\n\n  diag = (padding) => {\n    return {\n      fontFamily: this.fontFamily,\n      alignSelf: 'center',\n      fontSize: Platform.OS === 'web' ? 20 : 30,\n      margin: 10,\n      padding: padding ?? 10,\n      width: Platform.OS === 'web' ? '60%' : '90%',\n    };\n  };\n  scrollContainer = () => {\n    return { flexGrow: 1 };\n  };\n}\nconst theme = new Theme(DefaultTheme);\nconsole.log(theme.diag(20));\nexport default theme;\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Platform, SafeAreaView, StyleSheet, Text, View } from 'react-native';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useFonts } from 'expo-font';\n\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  split,\n  ApolloProvider,\n  gql,\n  useQuery,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport MainComponent from './src/Main';\nimport theme from './src/styles';\n\nconst authLink = setContext(async (_, { headers }) => {\n  const token1 = await AsyncStorage.getItem('@gql_vocab_token');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token1 ? token1 : null,\n    },\n  };\n});\nconst httpLink = new HttpLink({\n  uri: 'https://apollo-vocab-serve.herokuapp.com/',\n\n  //uri: 'http://192.168.0.105:4001/',\n  //uri: 'http://localhost:4001/',\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink),\n  connectToDevTools: true,\n});\n\nexport default function App() {\n  const [loaded] = useFonts({\n    KumbhSans: require('./assets/fonts/KumbhSans-VariableFont_wght.ttf'),\n  });\n\n  if (!loaded) {\n    return null;\n  }\n  return (\n    <SafeAreaView\n      style={{\n        ...theme.container(),\n      }}>\n      <StatusBar style='auto' />\n      <ApolloProvider client={client}>\n        <PaperProvider theme={theme}>\n          <MainComponent />\n        </PaperProvider>\n      </ApolloProvider>\n    </SafeAreaView>\n  );\n}\n","module.exports = __webpack_public_path__ + \"./fonts/KumbhSans-VariableFont_wght.ttf\";"],"sourceRoot":""}