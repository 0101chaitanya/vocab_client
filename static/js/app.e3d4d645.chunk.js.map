{"version":3,"sources":["src/queries/gqlQueries.js","src/components/SignInScreen.js","src/components/SignUpScreen.js","src/components/ItemModalComponent.js","src/components/Home.js","src/Main.js","src/styles.js","App.js"],"names":["CURRENT_USER","gql","REGISTER","LOGIN","ADD_WORD","SignInSchema","Yup","shape","username","min","max","required","password","SignIn","user","navigation","setUser","route","useMutation","login","data","called","error","loading","useEffect","Token","token","prevUser","console","log","a","async","AsyncStorage","setItem","getItem","lol","useTheme","headingSmall","container","warn","button","txtInput","ScrollView","contentContainerStyle","flexGrow","initialValues","validationSchema","onSubmit","variables","handleChange","errors","handleBlur","handleSubmit","values","Text","style","TextInput","onChangeText","onBlur","value","mode","label","secureTextEntry","Button","onPress","color","alignSelf","navigate","Paragraph","SignupSchema","passwordConfirmation","oneOf","register","RenderModal","props","Platform","OS","Modal","ItemModal","item","wordContainer","colors","search","pos","fab","React","useState","visible","setVisible","hideModal","Card","Pressable","Headline","primary","paddingLeft","word","toUpperCase","Portal","animationType","onDismiss","backgroundColor","padding","flex","width","justifyContent","icon","position","top","right","origin","phonetic","meanings","map","i","View","key","partOfSpeech","definitions","definitionItem","j","definition","example","synonyms","join","antonyms","wordSchema","Home","wordQuery","addWordError","addWordData","useQuery","refetch","searchQuery","setSearchQuery","flatData","setFlatData","refreshing","setRefreshing","currentUser","words","dataField","filter","includes","ActivityIndicator","animating","Colors","message","Searchbar","placeholder","query","FlatList","renderItem","keyExtractor","_id","refreshControl","onRefresh","setTimeout","alignItems","margin","JSON","stringify","graphQLErrors","addWord","FAB","small","Stack","createNativeStackNavigator","MainComponent","useLayoutEffect","res","NavigationContainer","Navigator","screenOptions","headerRight","clear","Screen","name","options","title","component","SignUp","theme","DefaultTheme","fontSize","this","textDecorationLine","borderRadius","bottom","authLink","setContext","_","headers","token1","authorization","httpLink","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","concat","connectToDevTools","App","SafeAreaView","StatusBar","ApolloProvider","Main"],"mappings":"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","file":"static/js/app.e3d4d645.chunk.js","sourcesContent":["import { gql, useQuery } from '@apollo/client';\n\nconst CURRENT_USER = gql`\n  query {\n    currentUser {\n      id\n      words\n    }\n  }\n`;\n\nconst ALL_WORDS = gql`\n  query {\n    allWords {\n      id\n      word\n      origin\n      phonetic\n      phonetics {\n        audio\n        text\n      }\n      meanings {\n        partOfSpeech\n        definitions {\n          antonyms\n          definition\n          example\n          synonyms\n        }\n      }\n    }\n  }\n`;\n\nconst REGISTER = gql`\n  mutation ($username: String!, $password: String!) {\n    register(username: $username, password: $password)\n  }\n`;\n\nconst LOGIN = gql`\n  mutation ($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nconst ADD_WORD = gql`\n  mutation ($word: String!) {\n    addWord(word: $word)\n  }\n`;\n\nexport { ADD_WORD, ALL_WORDS, LOGIN, REGISTER, CURRENT_USER };\n","//import liraries\nimport React, { Component, useEffect, useState } from 'react';\nimport { ScrollView, View, StyleSheet } from 'react-native';\nimport {\n  Card,\n  Text,\n  Headline,\n  Button,\n  TextInput,\n  FAB,\n  Paragraph,\n  useTheme,\n} from 'react-native-paper';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { Formik } from 'formik';\nimport { LOGIN } from '../queries/gqlQueries';\nimport * as Yup from 'yup';\nimport { useMutation } from '@apollo/client';\n\nconst SignInSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(4, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(12, 'Too Long!')\n    .required('Required'),\n});\n\n// create a component\nconst SignIn = ({ user, navigation, route, setUser }) => {\n  const [login, { data, called, loading, error }] = useMutation(LOGIN);\n  useEffect(() => {\n    if (data) {\n      const Token = data.login.token;\n      setUser((prevUser) => ({\n        ...prevUser,\n        token: Token,\n      }));\n      console.log(Token);\n      (async () => {\n        await AsyncStorage.setItem('@gql_vocab_token', Token);\n\n        const lol = await AsyncStorage.getItem('@gql_vocab_token');\n\n        console.log('res', lol);\n        return lol;\n      })();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  /*   const clearAsyncStorage = async () => {\n    return AsyncStorage.clear();\n  };\n  clearAsyncStorage();\n */\n  const { container, headingSmall, warn, button, txtInput } = useTheme();\n  return (\n    <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\n      <Formik\n        initialValues={{ username: '', password: '' }}\n        validationSchema={SignInSchema}\n        onSubmit={({ username, password }) => {\n          console.log(username, password);\n          login({\n            variables: {\n              username,\n              password,\n            },\n          });\n        }}>\n        {({ handleChange, errors, handleBlur, handleSubmit, values }) => (\n          <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\n            <Text style={headingSmall}>Sign In</Text>\n            <TextInput\n              style={txtInput}\n              onChangeText={handleChange('username')}\n              onBlur={handleBlur('username')}\n              value={values.username}\n              mode='outlined'\n              label='Username'\n            />\n            <Text style={warn}>{errors.username}</Text>\n            <TextInput\n              style={txtInput}\n              onChangeText={handleChange('password')}\n              onBlur={handleBlur('password')}\n              value={values.password}\n              mode='outlined'\n              label='Password'\n              secureTextEntry={true}\n            />\n\n            <Text style={warn}>{errors.password}</Text>\n\n            <Button mode='contained' onPress={handleSubmit} style={button}>\n              Submit\n            </Button>\n            <Text\n              style={{\n                color: 'red',\n                alignSelf: 'center',\n              }}>\n              OR\n            </Text>\n            <Button\n              mode='contained'\n              onPress={() => navigation.navigate('SignUp')}\n              style={button}>\n              SignUp\n            </Button>\n          </ScrollView>\n        )}\n      </Formik>\n      <Paragraph style={warn}>\n        {called\n          ? error\n            ? `Error: ${error}`\n            : called && data && data.login.token\n            ? `Login successful`\n            : 'Login failed'\n          : ''}\n      </Paragraph>\n    </ScrollView>\n  );\n};\n\n// define your styles\n\n//make this component available to the app\nexport default SignIn;\n/* style={{\n        ...container,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n       */\n/* <Paragraph style={warn}>\n              {called\n                ? error\n                  ? `Error: ${error}`\n                  : called && data && data.login.token\n                  ? `Login successful`\n                  : 'Login failed'\n                : ''}\n            </Paragraph>\n          */\n","//import liraries\nimport React, { Component, useState } from 'react';\nimport { View, StyleSheet, ScrollView } from 'react-native';\nimport {\n  Card,\n  Text,\n  Headline,\n  Button,\n  TextInput,\n  Paragraph,\n  useTheme,\n} from 'react-native-paper';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useMutation } from '@apollo/client';\nimport { REGISTER } from '../queries/gqlQueries';\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(4, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(12, 'Too Long!')\n    .required('Required'),\n  passwordConfirmation: Yup.string().oneOf(\n    [Yup.ref('password'), null],\n    'Passwords must match'\n  ),\n});\n\n// create a component\nconst SignIn = ({ user, navigation, route, setUser }) => {\n  const { container, headingSmall, warn, button, txtInput } = useTheme();\n\n  const [register, registerResult] = useMutation(REGISTER);\n  return (\n    <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\n      <Formik\n        initialValues={{ username: '', password: '', passwordConfirmation: '' }}\n        validationSchema={SignupSchema}\n        onSubmit={({ username, password }) => {\n          register({\n            variables: {\n              username,\n              password,\n            },\n          });\n        }}>\n        {({ handleChange, errors, handleBlur, handleSubmit, values }) => (\n          <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\n            <Text style={headingSmall}>Sign Up</Text>\n            <TextInput\n              style={txtInput}\n              onChangeText={handleChange('username')}\n              onBlur={handleBlur('username')}\n              value={values.username}\n              mode='outlined'\n              label='Username'\n            />\n            <Text style={warn}>{errors.username}</Text>\n            <TextInput\n              style={txtInput}\n              onChangeText={handleChange('password')}\n              onBlur={handleBlur('password')}\n              value={values.password}\n              mode='outlined'\n              label='Password'\n              secureTextEntry={true}\n            />\n\n            <Text style={warn}>{errors.password}</Text>\n            <TextInput\n              style={txtInput}\n              onChangeText={handleChange('passwordConfirmation')}\n              onBlur={handleBlur('passwordConfirmation')}\n              value={values.passwordConfirmation}\n              mode='outlined'\n              label='Confirm Password'\n              secureTextEntry={true}\n            />\n\n            <Text style={warn}>{errors.passwordConfirmation}</Text>\n\n            <Button mode='contained' onPress={handleSubmit} style={button}>\n              Submit\n            </Button>\n            <Text\n              style={{\n                color: 'red',\n                alignSelf: 'center',\n              }}>\n              OR\n            </Text>\n            <Button\n              mode='contained'\n              onPress={() => navigation.navigate('SignIn')}\n              style={button}>\n              SignIn\n            </Button>\n          </ScrollView>\n        )}\n      </Formik>\n    </ScrollView>\n  );\n};\n\n// define your styles\n\n//make this component available to the app\nexport default SignIn;\n\n/*   <Paragraph style={warn}>\n              {registerResult.called\n                ? error\n                  ? `Error: ${error}`\n                  : registerResult.called &&\n                    registerResult.data &&\n                    registerResult.data.register\n                  ? ` successfully registered`\n                  : 'Registration failed'\n                : ''}\n            </Paragraph>\n          */\n","//import liraries\nimport React, { Component } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  Platform,\n  StyleSheet,\n  Pressable,\n  ScrollView,\n} from 'react-native';\nimport {\n  Headline,\n  Title,\n  Portal,\n  Button,\n  Modal as WebModal,\n  Card,\n  useTheme,\n} from 'react-native-paper';\n\n// create a component\nconst ItemModal = ({ item }) => {\n  const {\n    container,\n    headingSmall,\n    txtInput,\n    warn,\n    wordContainer,\n    button,\n    search,\n    colors,\n    fab,\n    pos,\n  } = useTheme();\n  const [visible, setVisible] = React.useState(false);\n  const showModal = () => setVisible(true);\n  const hideModal = () => setVisible(false);\n\n  return (\n    <Card style={{ ...wordContainer }}>\n      <Pressable onPress={showModal}>\n        <Headline\n          style={{\n            color: colors.primary,\n            paddingLeft: 15,\n          }}>\n          {item.word.toUpperCase()}\n        </Headline>\n\n        <Portal>\n          <RenderModal\n            visible={visible}\n            animationType='slide'\n            onDismiss={hideModal}\n            contentContainerStyle={{\n              backgroundColor: 'white',\n              padding: 20,\n              flex: 1,\n              width: '100%',\n              justifyContent: 'start',\n            }}>\n            <ScrollView contentContainerStyle={{ flexGrow: 1, padding: 20 }}>\n              <Button\n                icon='close'\n                onPress={hideModal}\n                style={{\n                  position: 'absolute',\n                  top: 10,\n                  right: 10,\n                }}\n              />\n\n              <Headline>Word : {item.word.toUpperCase()}</Headline>\n              <Text style={pos}>Origin : {item.origin}</Text>\n              <Text style={pos}>Phonetic : {item.phonetic}</Text>\n\n              {item.meanings.map((item, i) => (\n                <View key={i}>\n                  <Text style={pos}>Part of speech : {item.partOfSpeech}</Text>\n                  {item.definitions.map((definitionItem, j) => (\n                    <View key={j}>\n                      <Text style={pos}>\n                        Definition : {definitionItem.definition}\n                      </Text>\n                      <Text style={pos}>\n                        Example : {definitionItem.example}\n                      </Text>\n                      <Text style={pos}>\n                        Synonyms : {definitionItem.synonyms.join(', ')}\n                      </Text>\n                      <Text style={pos}>\n                        Antonyms : {definitionItem.antonyms.join(', ')}\n                      </Text>\n                    </View>\n                  ))}\n                </View>\n              ))}\n            </ScrollView>\n          </RenderModal>\n        </Portal>\n      </Pressable>\n    </Card>\n  );\n};\n\n// define your styles\nfunction RenderModal(props) {\n  if (Platform.OS === 'web') {\n    return <WebModal {...props} />;\n  }\n\n  return <Modal {...props} />;\n}\n\n//make this component available to the app\nexport default ItemModal;\n","import React, { useEffect, useState } from 'react';\nimport { useMutation, useLazyQuery, useQuery } from '@apollo/client';\nimport {\n  Modal,\n  Platform,\n  Text,\n  View,\n  //RefreshControl,\n  StyleSheet,\n  ScrollView,\n  FlatList,\n} from 'react-native';\n\nimport { ADD_WORD, CURRENT_USER } from '../queries/gqlQueries';\nimport { RefreshControl } from 'react-native-web-refresh-control';\nimport { patchFlatListProps } from 'react-native-web-refresh-control';\n\nimport { Ionicons } from '@expo/vector-icons';\nimport {\n  Searchbar,\n  TextInput,\n  ActivityIndicator,\n  Colors,\n  Modal as WebModal,\n  Paragraph,\n  FAB,\n  useTheme,\n  Portal,\n  Button,\n} from 'react-native-paper';\nimport { AntDesign } from '@expo/vector-icons';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ItemModal from './ItemModalComponent';\n\nconst wordSchema = Yup.object().shape({\n  word: Yup.string().required('Required'),\n});\n\nconst Home = ({ user, navigation, route, setUser }) => {\n  const { container, headingSmall, pos, txtInput, warn, button, search, fab } =\n    useTheme();\n  const [\n    wordQuery,\n    { called, loading: addWordLoading, error: addWordError, data: addWordData },\n  ] = useMutation(ADD_WORD);\n  const { loading, error, data, refetch } = useQuery(CURRENT_USER);\n  const [visible, setVisible] = React.useState(false);\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [flatData, setFlatData] = React.useState([]);\n  const onChangeSearch = (query) => setSearchQuery(query);\n  const [refreshing, setRefreshing] = React.useState(false);\n  const showModal = () => setVisible(true);\n  const hideModal = () => setVisible(false);\n  console.log(flatData);\n\n  React.useEffect(() => {\n    setFlatData(data?.currentUser?.words);\n  }, [data?.currentUser?.words]);\n\n  React.useEffect(() => {\n    const dataField =\n      searchQuery !== ''\n        ? flatData.filter((data) => data.word.includes(searchQuery))\n        : data?.currentUser?.words;\n    console.log(searchQuery, dataField);\n    setFlatData(dataField);\n  }, [searchQuery]);\n  //data?.currentUser?.words ??\n\n  if (loading)\n    return <ActivityIndicator animating={true} color={Colors.red800} />;\n  if (error) return <Text>Error! {error.message}</Text>;\n  return (\n    <View style={container}>\n      <Searchbar\n        placeholder='Search'\n        onChangeText={onChangeSearch}\n        value={searchQuery}\n        style={{ ...search }}\n      />\n\n      <Text style={{ ...pos, alignSelf: 'center' }}>Pull down to refetch</Text>\n\n      <FlatList\n        data={flatData}\n        renderItem={(item) => <ItemModal {...item} />}\n        keyExtractor={(item) => item._id}\n        /*  refreshControl={\n          <RefreshControl\n            onLayout={(e) => console.log(e.nativeEvent)}\n            // all properties must be transparent\n            tintColor='red'\n            colors={['red']}\n            style={{ backgroundColor: 'red' }}\n            refreshing={refreshing}\n            onRefresh={() => {\n              setRefreshing(true);\n              /*    setTimeout(() => {\n                this._addRows();\n              }, 2000);\n           }} */\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={() => {\n              setRefreshing(true);\n              setTimeout(() => {\n                setRefreshing(false);\n                refetch();\n              }, 5000);\n            }}\n          />\n        }\n      />\n\n      <Portal>\n        <RenderModal\n          visible={visible}\n          animationType='slide'\n          onDismiss={hideModal}\n          contentContainerStyle={{\n            backgroundColor: 'white',\n            padding: 10,\n            flex: 1,\n            width: '100%',\n            justifyContent: 'start',\n          }}>\n          <Formik\n            initialValues={{ word: '' }}\n            validationSchema={wordSchema}\n            onSubmit={({ word }) => {\n              console.log(word);\n              wordQuery({\n                variables: {\n                  word,\n                },\n              });\n            }}>\n            {({ handleChange, errors, handleBlur, handleSubmit, values }) => (\n              <View\n                style={{\n                  ...container,\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}>\n                <Button\n                  icon='close'\n                  onPress={hideModal}\n                  style={{\n                    position: 'absolute',\n                    top: 5,\n                    margin: 10,\n                    right: 10,\n                  }}\n                />\n\n                <Text style={headingSmall}>ADD NEW WORD </Text>\n\n                <TextInput\n                  style={txtInput}\n                  onChangeText={handleChange('word')}\n                  onBlur={handleBlur('word')}\n                  value={values.word}\n                  mode='outlined'\n                  label='New Word'\n                />\n\n                <Button mode='contained' onPress={handleSubmit} style={button}>\n                  Submit\n                </Button>\n                <Paragraph style={warn}>\n                  {called\n                    ? addWordError || error\n                      ? JSON.stringify(addWordError.graphQLErrors[0].message) +\n                        JSON.stringify(error)\n                      : addWordData?.addWord\n                    : ''}\n                </Paragraph>\n              </View>\n            )}\n          </Formik>\n        </RenderModal>\n      </Portal>\n      <FAB small icon='plus' style={fab} onPress={showModal} />\n    </View>\n  );\n};\n\nexport default Home;\n\n/*< FlatList\n        data={DATA}\n        renderItem={ItemModal}\n        keyExtractor={(item) => item.id}\n      /> */\n\nfunction RenderModal(props) {\n  if (Platform.OS === 'web') {\n    return <WebModal {...props} />;\n  }\n\n  return <Modal {...props} />;\n}\n/* {<AntDesign name='close' size={24} color='black' />}\n */\n\n/*  <Portal>\n           <Modal\n             visible={visible}\n             onDismiss={hideModal}\n             contentContainerStyle={{\n               backgroundColor: 'white',\n               padding: 10,\n               flex: 1,\n               width: '100%',\n               justifyContent: 'start',\n             }}>\n             <Button\n               icon={() => <AntDesign name='close' size={24} color='black' />}\n               onPress={hideModal}\n               style={{\n                 position: 'absolute',\n                 top: 20,\n                 right: 20,\n               }}\n             />\n             <Text>Example Modal. Click outside this area to dismiss.</Text>\n           </Modal>\n         </Portal>\n          \n */\n","//import liraries\nimport React, { Component, useLayoutEffect, useEffect } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport SignIn from './components/SignInScreen';\nimport SignUp from './components/SignUpScreen';\nimport Home from './components/Home';\nimport { Button } from 'react-native-paper';\nconst Stack = createNativeStackNavigator();\n\n// create a component\nconst MainComponent = () => {\n  const [user, setUser] = React.useState({\n    token: null,\n    user: {},\n  });\n  useLayoutEffect(() => {\n    const res = async () => {\n      try {\n        const token = await AsyncStorage.getItem('@gql_vocab_token');\n\n        setUser((prevUser) => ({\n          ...prevUser,\n          token,\n        }));\n      } catch (e) {}\n    };\n\n    res();\n  }, [user.token]);\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={({ navigation }) => ({\n          headerRight: () => (\n            <Button\n              onPress={() => {\n                AsyncStorage.clear();\n                setUser({\n                  token: null,\n                  user: {},\n                });\n              }}>\n              Log out\n            </Button>\n          ),\n        })}>\n        {user.token ? (\n          <>\n            <Stack.Screen name='Home'>\n              {(props) => <Home user={user} setUser={setUser} {...props} />}\n            </Stack.Screen>\n          </>\n        ) : (\n          <>\n            <Stack.Screen\n              name='SignIn'\n              options={{\n                title: 'Sign in',\n                headerRight: '',\n              }}>\n              {(props) => <SignIn user={user} setUser={setUser} {...props} />}\n            </Stack.Screen>\n            <Stack.Screen\n              name='SignUp'\n              options={{\n                title: 'Sign Up',\n                headerRight: '',\n              }}\n              component={SignUp}\n            />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default MainComponent;\n//animationTypeForReplace: !user.id ? 'pop' : 'push',\n","import React from 'react';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport { Platform } from 'react-native';\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: 'red',\n  },\n  container: {\n    flex: 1,\n  },\n  get wordContainer() {\n    return {\n      width: Platform.OS === 'web' ? '60%' : '80%',\n      alignSelf: 'center',\n      padding: 5,\n      margin: 5,\n    };\n  },\n\n  get headingSmall() {\n    return {\n      fontSize: 30,\n      color: this.colors.primary,\n      textDecorationLine: 'underline',\n      alignSelf: 'center',\n      margin: 10,\n    };\n  },\n  get pos() {\n    return {\n      fontSize: 17,\n      margin: 5,\n    };\n  },\n\n  get button() {\n    return {\n      margin: 10,\n      backgroundColor: this.colors.primary,\n      borderRadius: 10,\n      width: Platform.OS === 'web' ? '40%' : '80%',\n      alignSelf: 'center',\n    };\n  },\n  get warn() {\n    return {\n      fontSize: 18,\n      color: this.colors.primary,\n      margin: 10,\n      alignSelf: 'center',\n    };\n  },\n  get txtInput() {\n    return {\n      color: this.colors.primary,\n      width: Platform.OS === 'web' ? '40%' : '80%',\n      alignSelf: 'center',\n    };\n  },\n  get search() {\n    return {\n      margin: 10,\n      width: Platform.OS === 'web' ? '60%' : '80%',\n      alignSelf: 'center',\n      borderRadius: 10,\n    };\n  },\n  get fab() {\n    return {\n      backgroundColor: this.colors.primary,\n      position: 'absolute',\n      margin: 20,\n      right: 0,\n      bottom: 0,\n    };\n  },\n};\n\nexport default theme;\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, Text, View } from 'react-native';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  split,\n  ApolloProvider,\n  gql,\n  useQuery,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport MainComponent from './src/Main';\nimport theme from './src/styles';\n\nconst authLink = setContext(async (_, { headers }) => {\n  const token1 = await AsyncStorage.getItem('@gql_vocab_token');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token1 ? token1 : null,\n    },\n  };\n});\nconst httpLink = new HttpLink({\n  // uri: 'http://localhost:4000',\n  uri: 'https://apollo-vocab-serve.herokuapp.com/',\n  //uri: 'http://192.168.0.105:4000/',\n  //192.168.0.105\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink),\n  connectToDevTools: true,\n});\n\nexport default function App() {\n  return (\n    <SafeAreaView style={theme.container}>\n      <StatusBar style='auto' />\n      <ApolloProvider client={client}>\n        <PaperProvider theme={theme}>\n          <MainComponent />\n        </PaperProvider>\n      </ApolloProvider>\n    </SafeAreaView>\n  );\n}\n"],"sourceRoot":""}